name: 'Build Docker workspace image'

on:
  push:
    branches:
      - main
    paths:
      - Dockerfile
      - setups/setup_fzf.sh
      - setups/setup_zprezto.zsh
      - setups/setup_env.sh
      - setups/setup_utils.sh
  workflow_dispatch:
  #workflow_run:
  #  workflows: [Build Docker base image]
  #  types:
  #    - completed

jobs:
  dockerImagesBuild:
    name: Docker Images build
    runs-on: ubuntu-20.04
    if: ${{ (github.event_name == 'push') || (github.event_name == 'workflow_dispatch' ) || (github.event.workflow_run.conclusion == 'success') }}
    env:
      RUN_INFO: ''
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Print workdir
      run: pwd
    - name: Set run info
      id: set_run_info
      shell: bash
      run: |
        RUN_INFO=$(cat << EOF
        Workflow $GITHUB_WORKFLOW triggered by $GITHUB_EVENT_NAME
        Action run on $RUNNER_OS by $RUNNER_NAME
        Commit $GITHUB_SHA on $GITHUB_REF
        EOF
        )
        echo "RUN_INFO<<EOF" >> $GITHUB_ENV
        echo "$RUN_INFO" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
    - name: Show run info
      run: |
        echo "${{ env.RUN_INFO }}"
    - name: Set date of today
      id: today
      shell: bash
      run: echo "today=$(date '+%Y%m%d')" >> $GITHUB_OUTPUT
    - name: Extract branch name
      id: extract_branch_name
      shell: bash
      run: echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> "$GITHUB_OUTPUT"
    - name: Extract short commit hash
      id: extract_short_hash
      shell: bash
      run:  echo "currentcommit=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"
    - name: "Setup of docker build ARGs"
      id: 'docker_build_args_setup'
      shell: bash
      run: |
        cat workspace_versions.sh
        source workspace_versions.sh
        WORKSPACE_VERSION="$(echo ${{ steps.today.outputs.today }}.${{ steps.extract_short_hash.outputs.currentcommit }})"
        # check GH Action inputs
        if [ ! -z "${{ github.event.inputs.workspace_version }}" ]; then
          WORKSPACE_VERSION="${{ github.event.inputs.workspace_version }}";
        fi
        #if [[ ${GITHUB_REF} == refs/tags/* ]]; then WORKSPACE_VERSION="${GITHUB_REF##*/}"; fi
        # set values in GH Action env. context
        printf "\n\nSet values in GH Action env context\n"
        echo "WORKSPACE_VERSION=$WORKSPACE_VERSION" >> $GITHUB_ENV
        # printing env added to GITHUB_ENV, hide the rest
        printf "\n\nPrinting env added to GITHUB_ENV env file (${GITHUB_ENV})\n"
        cat $GITHUB_ENV | tail -n10
    # preparing environment for docker build
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    # prepare workspace image tags and labels
    - name: Docker metadata for workspace image
      id: meta_workspace_image
      uses: docker/metadata-action@v4
      with:
        github-token: ${{ github.token }}
        images: |
          ${{ github.repository }}
          quay.io/${{ github.repository }}
        tags: |
          ${{ env.WORKSPACE_VERSION }}
          latest
          type=match,pattern=\d.\d.\d
        flavor: |
          latest=false
    # login to registries
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Login to Quay.io
      uses: docker/login-action@v2
      with:
        registry: quay.io
        username: ${{ secrets.QUAY_USERNAME }}
        password: ${{ secrets.QUAY_ENCRYPTED_PASSWORD }}
    # *** 
    # restore cache, build, push and put to cache workspace image
    # ***
    # So now you can use Actions' own caching!
    - name: Cache Docker layers for workspace image
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache-workspace
        key: ${{ runner.os }}-buildx-workspace-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-workspace
    - name: Build and push workspace image
      #if: ${{ (github.event.inputs.build_target == 'workspace') || (github.event_name == 'push' && github.ref == 'refs/heads/main') }}
      id: docker_build_workspace_image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: Dockerfile
        platforms: linux/amd64 #,linux/arm64
        # push only if on branch 'main'
        push: ${{ (github.ref == 'refs/heads/main') && (github.event_name != 'pull_request') }}
        tags: ${{ steps.meta_workspace_image.outputs.tags }}
        build-args: WORKSPACE_VERSION=${{ env.WORKSPACE_VERSION }}
        cache-from: type=local,src=/tmp/.buildx-cache-workspace
        cache-to: type=local,dest=/tmp/.buildx-cache-new-workspace
        # fixes azure container instance a
        # revert change introduced since v4 of docker/build-push-action
        # sources:
        #   https://github.com/hyperledger/firefly/pull/1174
        #   https://learn.microsoft.com/en-us/answers/questions/204946/deploying-docker-container-instance-fails-to-acces
        #   https://docs.docker.com/build/attestations/slsa-provenance/
        provenance: false
      # if you don't want your cache to grow forever (GH has 5GB limit)
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
    - name: Move cache for workspace image
      run: |
        rm -rf /tmp/.buildx-cache-workspace
        mv /tmp/.buildx-cache-new-workspace /tmp/.buildx-cache-workspace
    # *** 
    # final steps
    # *** 
    - uses: mukunku/tag-exists-action@v1.2.0
      name: Check if tag exists
      id: checkTag
      with:
        tag: ${{ env.WORKSPACE_VERSION }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Create a lightweight git tag
      uses: actions/github-script@v3
      # weird 'if' syntax due to issue: https://github.com/actions/runner/issues/1173
      if: (steps.checkTag.outputs.exists != format('{0}', 'true')) && (github.ref == format('refs/heads/{0}', 'main'))
      with:
        github-token: ${{ github.token }}
        script: |
          github.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: "refs/tags/${{ env.WORKSPACE_VERSION }}",
            sha: context.sha
          })
  sendNotification:
    name: Send Notification
    runs-on: ubuntu-20.04
    #if: ${{ always() }}
    if: ${{ false }}
    needs: [dockerImagesBuild]
    steps:
    - name: Send Push Notification
      uses: fjogeleit/http-request-action@master
      if: always()
      with:
        url: ${{ secrets.NOTIFICATION_WEBHOOK_URI }}
        method: 'POST'
        data: '{ "value1": "[GitHub] ${{ github.repository }}", "value2": "Build of Docker workspace image on branch ${{ steps.extract_branch_name.outputs.branch }} with target &quot;${{ github.event.inputs.build_target }}&quot; finished with status ${{ needs.dockerImagesBuild.result }}.", "value3": "<br>Workflow &quot;${{ github.workflow }}&quot; triggered by &quot;${{ github.event_name }}&quot;.<br>Action run on ${{ runner.os }} by ${{ runner.name }}.<br>Commit ${{ github.sha }} on ${{ github.ref }}.<br>https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" }'


