name: 'build_images'

on:
  push:
    branches:
      - main
    paths:
      - build.sh
      - Dockerfile
      - install.sh
      - pre_start.zsh
      - workspace_versions.sh
      - setups/*.sh
      - setups/*.zsh
      - workspaces/*.dockerfile
      - workspaces/*.sh
      - workspaces/*.zsh
  workflow_dispatch:
    inputs:
      build_target:
        description: 'Build what? [base|bundle]'
        required: true
        default: 'base'
      workspace_version:
        description: "Version"
        required: false
      javaversion:
        description: "Which Java version?"
        required: false
      javavendor:
        description: "Which Java vendor?"
        required: false
      nodeversion:
        description: "Which node.js version?"
        required: false
      golangversion:
        description: "Which Go version?"
        required: false
      python3version:
        description: "Which Python 3 version?"
        required: false
      rubyversion:
        description: "Which Ruby version?"
        required: false

jobs:
  dockerImagesBuild:
    name: Docker Images build
    runs-on: ubuntu-20.04
    env:
      RUN_INFO: ''
    steps:
    - uses: actions/checkout@v2
    - name: Print workdir
      run: pwd
    - name: Set run info
      id: set_run_info
      shell: bash
      run: |
        RUN_INFO=$(cat << EOF
        Workflow $GITHUB_WORKFLOW triggered by $GITHUB_EVENT_NAME
        Action run on $RUNNER_OS by $RUNNER_NAME
        Commit $GITHUB_SHA on $GITHUB_REF
        EOF
        )
        echo "RUN_INFO<<EOF" >> $GITHUB_ENV
        echo "$RUN_INFO" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
    - name: Show run info
      run: |
        echo "${{ env.RUN_INFO }}"
    - name: Set date of today
      id: today
      shell: bash
      run: echo "::set-output name=today::$(date '+%Y%m%d')"
    - name: Extract branch name
      id: extract_branch_name
      shell: bash
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
    - name: "Setup of docker build ARGs"
      id: 'docker_build_args_setup'
      shell: bash
      run: |
        cat workspace_versions.sh
        source workspace_versions.sh
        WORKSPACE_VERSION="$(echo ${{ steps.today.outputs.today }}.${{ steps.extract_branch_name.outputs.branch }})"
        # check GH Action inputs
        if [ ! -z "${{ github.event.inputs.workspace_version }}" ]; then
          WORKSPACE_VERSION="${{ github.event.inputs.workspace_version }}"; fi
        if [ ! -z "${{ github.event.inputs.javaversion }}" ]; then
          JAVAVERSION="${{ github.event.inputs.javaversion }}"; fi
        if [ ! -z "${{ github.event.inputs.javavendor }}" ]; then
          JAVAVENDOR="${{ github.event.inputs.javavendor }}"; fi
        if [ ! -z "${{ github.event.inputs.nodeversion }}" ]; then
          NODEVERSION="${{ github.event.inputs.nodeversion }}"; fi
        if [ ! -z "${{ github.event.inputs.golangversion }}" ]; then
          GOLANGVERSION="${{ github.event.inputs.golangversion }}"; fi
        if [ ! -z "${{ github.event.inputs.python3version }}" ]; then
          PYTHON3VERSION="${{ github.event.inputs.python3version }}"; fi
        if [ ! -z "${{ github.event.inputs.rubyversion }}" ]; then
          RUBYVERSION="${{ github.event.inputs.rubyversion }}"; fi
        # print versions set
        set | grep -E 'VERSION|VENDOR'
        # set values in GH Action env. context
        echo "WORKSPACE_VERSION=$WORKSPACE_VERSION" >> $GITHUB_ENV
        echo "JAVAVERSION=$JAVAVERSION" >> $GITHUB_ENV
        echo "JAVAVENDOR=$JAVAVENDOR" >> $GITHUB_ENV
        echo "NODEVERSION=$NODEVERSION" >> $GITHUB_ENV
        echo "GOLANGVERSION=$GOLANGVERSION" >> $GITHUB_ENV
        echo "PYTHON3VERSION=$PYTHON3VERSION" >> $GITHUB_ENV
        echo "RUBYVERSION=$RUBYVERSION" >> $GITHUB_ENV
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and push base image
      #if: ${{ (github.event.inputs.build_target == 'base') || (github.event_name == 'push' && github.ref == 'refs/heads/main') }}
      id: docker_build_base_image
      uses: docker/build-push-action@v2
      with:
        context: .
        file: Dockerfile
        platforms: linux/amd64 #,linux/arm64
        push: true
        tags: pirafrank/workspace:latest
        build-args: WORKSPACE_VERSION=${{ env.WORKSPACE_VERSION }}
    - name: Build and push bundle image
      if: ${{ (github.event.inputs.build_target != 'base') || (github.event_name == 'push' && github.ref == 'refs/heads/main') }}
      id: docker_build_bundle_image
      uses: docker/build-push-action@v2
      with:
        context: ./workspaces
        file: workspaces/Dockerfile_bundle.dockerfile
        platforms: linux/amd64
        push: true
        tags: pirafrank/workspace:bundle,pirafrank/workspace:bundle-${{ steps.today.outputs.today }}
        build-args: |
          JAVAVERSION=${{ env.JAVAVERSION }}
          JAVAVENDOR=${{ env.JAVAVENDOR }}
          NODEVERSION=${{ env.NODEVERSION }}
          GOLANGVERSION=${{ env.GOLANGVERSION }}
          PYTHON3VERSION=${{ env.PYTHON3VERSION }}
          RUBYVERSION=${{ env.RUBYVERSION }}
    - name: Send Push Notification
      uses: fjogeleit/http-request-action@master
      if: always()
      with:
        url: ${{ secrets.NOTIFICATION_WEBHOOK_URI }}
        method: 'POST'
        data: '{ "value1": "[GitHub] ${{ github.repository }}", "value2": "Build of Docker images on branch ${{ steps.extract_branch_name.outputs.branch }} with target &quot;${{ github.event.inputs.build_target }}&quot; finished with status ${{job.status}}.", "value3": "<br>Workflow &quot;${{ github.workflow }}&quot; triggered by &quot;${{ github.event_name }}&quot;.<br>Action run on ${{ runner.os }} by ${{ runner.name }}.<br>Commit ${{ github.sha }} on ${{ github.ref }}.<br>https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" }'


