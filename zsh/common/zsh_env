# precedence is left to right, so paths on the left have higher priority

# kitty config dir
export KITTY_CONFIG_DIRECTORY="$HOME/dotfiles/gui_terminals/kitty"

# LESS options
if [[ "$(uname -s)" != 'Darwin' ]]; then
  export LESS="-F -g -i -M -R -S -w -z-4"
fi

# load junegunn/fzf if installed
if [ -f ~/.fzf.zsh ]; then
  source ~/.fzf.zsh
fi

# dotfiles binaries
export PATH="$PATH:$HOME/bin"
export PATH="$PATH:$HOME/bin2"

# pyenv
if [[ -d $HOME/.pyenv ]]; then
export PATH="$HOME/.pyenv/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"
fi

# check for userspace java first
if [ -L "$HOME/bin2/jdk" ]; then
  export JAVA_HOME="$HOME/bin2/jdk"
  export PATH="$JAVA_HOME/bin:$PATH"
  switch_java(){
    if [ -z $1 ]; then
      echo "You need to specify a major version to link to"
    else
      jdkpath="$HOME/bin2/jdk$1"
      if [ -d $jdkpath ]; then
        rm -f $HOME/bin2/jdk
        ln -s $jdkpath $HOME/bin2/jdk
        echo "jdk symlink updated, now it points to $jdkpath"
      else
        echo "$jdkpath doesn't exists. Existing symlinks left untouched."
      fi
    fi
  }
# then check for system java
else
  if [[ "$(uname -s)" == 'Darwin' ]]; then
    export JAVA_8_HOME=$(/usr/libexec/java_home -v1.8)
    export JAVA_11_HOME=$(/usr/libexec/java_home -v11)
    export JAVA_14_HOME=$(/usr/libexec/java_home -v14)

    alias java8='export JAVA_HOME=$JAVA_8_HOME'
    alias java11='export JAVA_HOME=$JAVA_11_HOME'
    alias java14='export JAVA_HOME=$JAVA_14_HOME'
    # set default java version
    export JAVA_HOME=$JAVA_11_HOME
  elif [[ "$(uname -s)" == 'Linux' ]]; then
    load_java_home(){
      export JAVA_HOME=$(dirname $(dirname $(readlink -e /usr/bin/java)))
      export PATH="$PATH:$JAVA_HOME/bin"
    }
    alias java8='sudo update-alternatives --set java /usr/local/lib/jdk1.8/bin/java; load_java_home'
    alias java11='sudo update-alternatives --set java /usr/local/lib/jdk11/bin/java; load_java_home'
    alias java14='sudo update-alternatives --set java /usr/local/lib/jdk14/bin/java; load_java_home'
  fi
fi

# maven
export PATH="$HOME/bin2/maven/bin:$PATH"

# golang
# look for system install first
if [[ -d /usr/local/go/bin ]]; then
  export PATH="$PATH:/usr/local/go/bin"
  export GOPATH="$HOME/.golang"
  export PATH="$GOPATH/bin:$PATH"
# then for userspace install
elif [[ -d $HOME/bin2/go/bin ]]; then
  export PATH="$PATH:$HOME/bin2/go/bin"
  export GOPATH="$HOME/.golang"
  export PATH="$GOPATH/bin:$PATH"
fi

# swift
# on macOS it is part of Xcode
if [[ "$(uname -s)" == 'Linux' ]] && [[ -d /opt/swift/usr/bin ]]; then
export PATH=/opt/swift/usr/bin:$PATH
fi

# node.js
if [[ -d "$HOME/.nvm" ]]; then
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
#[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
fi

# rust
if [[ -d "$HOME/.cargo/bin" ]]; then
export PATH="$HOME/.cargo/bin:$PATH"
fi

# ruby
# for install as user
if [[ -d "$HOME/.rvm" ]]; then
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting
# for installs as root (docker?)
elif [[ -s "/usr/local/rvm/scripts/rvm" ]]; then
  source /usr/local/rvm/scripts/rvm
fi

# default RAILS environment
RAILS_ENV="development"

# GPG for SSH authentication
# do it only if there's TTY
if [[ $(command -v TTY) ]] && [[ "$(uname -s)" == 'Darwin' ]]; then
export "GPG_TTY=$(TTY)"
export "SSH_AUTH_SOCK=${HOME}/.gnupg/S.gpg-agent.ssh"
# notes:
#   for command line tty, ~/.gnupg/gpg-agent.conf needs:
#       pinentry-program /usr/bin/pinentry-curses
#   if needed, run the command below to force telling the agent which tty to use
#     gpg-connect-agent updatestartuptty /bye
fi
if [[ $(command -v tty) ]] && [[ "$(uname -s)" == 'Linux' ]]; then
export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
gpgconf --launch gpg-agent
fi

# Scaleway CLI autocomplete initialization.
if [[ $(command -v scw) ]]; then
  eval "$(scw autocomplete script shell=zsh)"
fi

# Secure ShellFish iOS app integration
if [[ -f "$HOME/.shellfishrc" ]]; then
  source $HOME/.shellfishrc
fi

