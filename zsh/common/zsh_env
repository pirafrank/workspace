# precedence is left to right, so paths on the left have higher priority

# kitty config dir
export KITTY_CONFIG_DIRECTORY="$HOME/dotfiles/gui_terminals/kitty"

# load junegunn/fzf if installed
if [ -f ~/.fzf.zsh ]; then
  source ~/.fzf.zsh
fi

# dotfiles binaries
export PATH="$PATH:$HOME/bin"
export PATH="$PATH:$HOME/bin2"

# pyenv
if [[ -d $HOME/.pyenv ]]; then
export PATH="$HOME/.pyenv/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"
fi

# java
if [[ "$(uname -s)" == 'Darwin' ]]; then
  #export JAVA_HOME=$(/usr/libexec/java_home)
  export JAVA_8_HOME=$(/usr/libexec/java_home -v1.8)
  export JAVA_11_HOME=$(/usr/libexec/java_home -v11)

  alias java8='export JAVA_HOME=$JAVA_8_HOME'
  alias java11='export JAVA_HOME=$JAVA_11_HOME'
fi
if [[ "$(uname -s)" == 'Linux' ]]; then
  load_java_home(){
    export JAVA_HOME=$(dirname $(dirname $(readlink -e /usr/bin/java)))
    export PATH="$PATH:$JAVA_HOME/bin"
  }
  alias java8='sudo update-alternatives --set java /usr/local/lib/jdk1.8/bin/java; load_java_home'
  alias java11='sudo update-alternatives --set java /usr/local/lib/jdk11/bin/java; load_java_home'
fi

# golang
if [[ -d /usr/local/go/bin ]]; then
export PATH="$PATH:/usr/local/go/bin"
export GOPATH="$HOME/.golang"
export PATH="$GOPATH/bin:$PATH"
fi

# swift
# on macOS it is part of Xcode
if [[ "$(uname -s)" == 'Linux' ]] && [[ -d /opt/swift/usr/bin ]]; then
export PATH=/opt/swift/usr/bin:$PATH
fi

# node.js
if [[ -d "$HOME/.nvm" ]]; then
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
#[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
fi

# rust
if [[ -d "$HOME/.cargo/bin" ]]; then
export PATH="$HOME/.cargo/bin:$PATH"
fi

# ruby
if [[ -d "$HOME/.rvm" ]]; then
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting
fi

# default RAILS environment
RAILS_ENV="development"

# GPG for SSH authentication
# do it only there's TTY
if [[ $(command -v TTY) ]] && [[ "$(uname -s)" == 'Darwin' ]]; then
export "GPG_TTY=$(TTY)"
export "SSH_AUTH_SOCK=${HOME}/.gnupg/S.gpg-agent.ssh"
fi
if [[ $(command -v tty) ]] && [[ "$(uname -s)" == 'Linux' ]]; then
export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
gpgconf --launch gpg-agent
fi

